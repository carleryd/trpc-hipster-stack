// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-axios';
import type { GetStatsData, GetStatsResponse, GetStatsError, GetLoggedInAthleteData, GetLoggedInAthleteResponse, GetLoggedInAthleteError, UpdateLoggedInAthleteData, UpdateLoggedInAthleteResponse, UpdateLoggedInAthleteError, GetLoggedInAthleteZonesData, GetLoggedInAthleteZonesResponse, GetLoggedInAthleteZonesError, GetSegmentByIdData, GetSegmentByIdResponse, GetSegmentByIdError, GetLoggedInAthleteStarredSegmentsData, GetLoggedInAthleteStarredSegmentsResponse, GetLoggedInAthleteStarredSegmentsError, StarSegmentData, StarSegmentResponse, StarSegmentError, GetEffortsBySegmentIdData, GetEffortsBySegmentIdResponse, GetEffortsBySegmentIdError, ExploreSegmentsData, ExploreSegmentsResponse, ExploreSegmentsError, GetSegmentEffortByIdData, GetSegmentEffortByIdResponse, GetSegmentEffortByIdError, CreateActivityData, CreateActivityResponse, CreateActivityError, GetActivityByIdData, GetActivityByIdResponse, GetActivityByIdError, UpdateActivityByIdData, UpdateActivityByIdResponse, UpdateActivityByIdError, GetLoggedInAthleteActivitiesData, GetLoggedInAthleteActivitiesResponse, GetLoggedInAthleteActivitiesError, GetLapsByActivityIdData, GetLapsByActivityIdResponse, GetLapsByActivityIdError, GetZonesByActivityIdData, GetZonesByActivityIdResponse, GetZonesByActivityIdError, GetCommentsByActivityIdData, GetCommentsByActivityIdResponse, GetCommentsByActivityIdError, GetKudoersByActivityIdData, GetKudoersByActivityIdResponse, GetKudoersByActivityIdError, GetClubByIdData, GetClubByIdResponse, GetClubByIdError, GetClubMembersByIdData, GetClubMembersByIdResponse, GetClubMembersByIdError, GetClubAdminsByIdData, GetClubAdminsByIdResponse, GetClubAdminsByIdError, GetClubActivitiesByIdData, GetClubActivitiesByIdResponse, GetClubActivitiesByIdError, GetLoggedInAthleteClubsData, GetLoggedInAthleteClubsResponse, GetLoggedInAthleteClubsError, GetGearByIdData, GetGearByIdResponse, GetGearByIdError, GetRouteByIdData, GetRouteByIdResponse, GetRouteByIdError, GetRoutesByAthleteIdData, GetRoutesByAthleteIdResponse, GetRoutesByAthleteIdError, GetRouteAsGpxData, GetRouteAsGpxError, GetRouteAsTcxData, GetRouteAsTcxError, CreateUploadData, CreateUploadResponse, CreateUploadError, GetUploadByIdData, GetUploadByIdResponse, GetUploadByIdError, GetActivityStreamsData, GetActivityStreamsResponse, GetActivityStreamsError, GetSegmentEffortStreamsData, GetSegmentEffortStreamsResponse, GetSegmentEffortStreamsError, GetSegmentStreamsData, GetSegmentStreamsResponse, GetSegmentStreamsError, GetRouteStreamsData, GetRouteStreamsResponse, GetRouteStreamsError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Athlete Stats
 * Returns the activity stats of an athlete. Only includes data from activities set to Everyone visibilty.
 */
export const getStats = <ThrowOnError extends boolean = false>(options: Options<GetStatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStatsResponse, GetStatsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/athletes/{id}/stats',
        ...options
    });
};

/**
 * Get Authenticated Athlete
 * Returns the currently authenticated athlete. Tokens with profile:read_all scope will receive a detailed athlete representation; all others will receive a summary representation.
 */
export const getLoggedInAthlete = <ThrowOnError extends boolean = false>(options?: Options<GetLoggedInAthleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoggedInAthleteResponse, GetLoggedInAthleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/athlete',
        ...options
    });
};

/**
 * Update Athlete
 * Update the currently authenticated athlete. Requires profile:write scope.
 */
export const updateLoggedInAthlete = <ThrowOnError extends boolean = false>(options: Options<UpdateLoggedInAthleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateLoggedInAthleteResponse, UpdateLoggedInAthleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/athlete',
        ...options
    });
};

/**
 * Get Zones
 * Returns the the authenticated athlete's heart rate and power zones. Requires profile:read_all.
 */
export const getLoggedInAthleteZones = <ThrowOnError extends boolean = false>(options?: Options<GetLoggedInAthleteZonesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoggedInAthleteZonesResponse, GetLoggedInAthleteZonesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/athlete/zones',
        ...options
    });
};

/**
 * Get Segment
 * Returns the specified segment. read_all scope required in order to retrieve athlete-specific segment information, or to retrieve private segments.
 */
export const getSegmentById = <ThrowOnError extends boolean = false>(options: Options<GetSegmentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSegmentByIdResponse, GetSegmentByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/segments/{id}',
        ...options
    });
};

/**
 * List Starred Segments
 * List of the authenticated athlete's starred segments. Private segments are filtered out unless requested by a token with read_all scope.
 */
export const getLoggedInAthleteStarredSegments = <ThrowOnError extends boolean = false>(options?: Options<GetLoggedInAthleteStarredSegmentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoggedInAthleteStarredSegmentsResponse, GetLoggedInAthleteStarredSegmentsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/segments/starred',
        ...options
    });
};

/**
 * Star Segment
 * Stars/Unstars the given segment for the authenticated athlete. Requires profile:write scope.
 */
export const starSegment = <ThrowOnError extends boolean = false>(options: Options<StarSegmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<StarSegmentResponse, StarSegmentError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/segments/{id}/starred',
        ...options
    });
};

/**
 * List Segment Efforts
 * Returns a set of the authenticated athlete's segment efforts for a given segment.  Requires subscription.
 */
export const getEffortsBySegmentId = <ThrowOnError extends boolean = false>(options: Options<GetEffortsBySegmentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetEffortsBySegmentIdResponse, GetEffortsBySegmentIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/segment_efforts',
        ...options
    });
};

/**
 * Explore segments
 * Returns the top 10 segments matching a specified query.
 */
export const exploreSegments = <ThrowOnError extends boolean = false>(options: Options<ExploreSegmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExploreSegmentsResponse, ExploreSegmentsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/segments/explore',
        ...options
    });
};

/**
 * Get Segment Effort
 * Returns a segment effort from an activity that is owned by the authenticated athlete. Requires subscription.
 */
export const getSegmentEffortById = <ThrowOnError extends boolean = false>(options: Options<GetSegmentEffortByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSegmentEffortByIdResponse, GetSegmentEffortByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/segment_efforts/{id}',
        ...options
    });
};

/**
 * Create an Activity
 * Creates a manual activity for an athlete, requires activity:write scope.
 */
export const createActivity = <ThrowOnError extends boolean = false>(options?: Options<CreateActivityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateActivityResponse, CreateActivityError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/activities',
        ...options
    });
};

/**
 * Get Activity
 * Returns the given activity that is owned by the authenticated athlete. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
 */
export const getActivityById = <ThrowOnError extends boolean = false>(options: Options<GetActivityByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetActivityByIdResponse, GetActivityByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/activities/{id}',
        ...options
    });
};

/**
 * Update Activity
 * Updates the given activity that is owned by the authenticated athlete. Requires activity:write. Also requires activity:read_all in order to update Only Me activities
 */
export const updateActivityById = <ThrowOnError extends boolean = false>(options: Options<UpdateActivityByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateActivityByIdResponse, UpdateActivityByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/activities/{id}',
        ...options
    });
};

/**
 * List Athlete Activities
 * Returns the activities of an athlete for a specific identifier. Requires activity:read. Only Me activities will be filtered out unless requested by a token with activity:read_all.
 */
export const getLoggedInAthleteActivities = <ThrowOnError extends boolean = false>(options?: Options<GetLoggedInAthleteActivitiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoggedInAthleteActivitiesResponse, GetLoggedInAthleteActivitiesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/athlete/activities',
        ...options
    });
};

/**
 * List Activity Laps
 * Returns the laps of an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
 */
export const getLapsByActivityId = <ThrowOnError extends boolean = false>(options: Options<GetLapsByActivityIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLapsByActivityIdResponse, GetLapsByActivityIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/activities/{id}/laps',
        ...options
    });
};

/**
 * Get Activity Zones
 * Summit Feature. Returns the zones of a given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
 */
export const getZonesByActivityId = <ThrowOnError extends boolean = false>(options: Options<GetZonesByActivityIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetZonesByActivityIdResponse, GetZonesByActivityIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/activities/{id}/zones',
        ...options
    });
};

/**
 * List Activity Comments
 * Returns the comments on the given activity. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
 */
export const getCommentsByActivityId = <ThrowOnError extends boolean = false>(options: Options<GetCommentsByActivityIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommentsByActivityIdResponse, GetCommentsByActivityIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/activities/{id}/comments',
        ...options
    });
};

/**
 * List Activity Kudoers
 * Returns the athletes who kudoed an activity identified by an identifier. Requires activity:read for Everyone and Followers activities. Requires activity:read_all for Only Me activities.
 */
export const getKudoersByActivityId = <ThrowOnError extends boolean = false>(options: Options<GetKudoersByActivityIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetKudoersByActivityIdResponse, GetKudoersByActivityIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/activities/{id}/kudos',
        ...options
    });
};

/**
 * Get Club
 * Returns a given club using its identifier.
 */
export const getClubById = <ThrowOnError extends boolean = false>(options: Options<GetClubByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetClubByIdResponse, GetClubByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/clubs/{id}',
        ...options
    });
};

/**
 * List Club Members
 * Returns a list of the athletes who are members of a given club.
 */
export const getClubMembersById = <ThrowOnError extends boolean = false>(options: Options<GetClubMembersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetClubMembersByIdResponse, GetClubMembersByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/clubs/{id}/members',
        ...options
    });
};

/**
 * List Club Administrators
 * Returns a list of the administrators of a given club.
 */
export const getClubAdminsById = <ThrowOnError extends boolean = false>(options: Options<GetClubAdminsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetClubAdminsByIdResponse, GetClubAdminsByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/clubs/{id}/admins',
        ...options
    });
};

/**
 * List Club Activities
 * Retrieve recent activities from members of a specific club. The authenticated athlete must belong to the requested club in order to hit this endpoint. Pagination is supported. Athlete profile visibility is respected for all activities.
 */
export const getClubActivitiesById = <ThrowOnError extends boolean = false>(options: Options<GetClubActivitiesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetClubActivitiesByIdResponse, GetClubActivitiesByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/clubs/{id}/activities',
        ...options
    });
};

/**
 * List Athlete Clubs
 * Returns a list of the clubs whose membership includes the authenticated athlete.
 */
export const getLoggedInAthleteClubs = <ThrowOnError extends boolean = false>(options?: Options<GetLoggedInAthleteClubsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLoggedInAthleteClubsResponse, GetLoggedInAthleteClubsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/athlete/clubs',
        ...options
    });
};

/**
 * Get Equipment
 * Returns an equipment using its identifier.
 */
export const getGearById = <ThrowOnError extends boolean = false>(options: Options<GetGearByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGearByIdResponse, GetGearByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/gear/{id}',
        ...options
    });
};

/**
 * Get Route
 * Returns a route using its identifier. Requires read_all scope for private routes.
 */
export const getRouteById = <ThrowOnError extends boolean = false>(options: Options<GetRouteByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRouteByIdResponse, GetRouteByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/routes/{id}',
        ...options
    });
};

/**
 * List Athlete Routes
 * Returns a list of the routes created by the authenticated athlete. Private routes are filtered out unless requested by a token with read_all scope.
 */
export const getRoutesByAthleteId = <ThrowOnError extends boolean = false>(options?: Options<GetRoutesByAthleteIdData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetRoutesByAthleteIdResponse, GetRoutesByAthleteIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/athletes/{id}/routes',
        ...options
    });
};

/**
 * Export Route GPX
 * Returns a GPX file of the route. Requires read_all scope for private routes.
 */
export const getRouteAsGpx = <ThrowOnError extends boolean = false>(options: Options<GetRouteAsGpxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetRouteAsGpxError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/routes/{id}/export_gpx',
        ...options
    });
};

/**
 * Export Route TCX
 * Returns a TCX file of the route. Requires read_all scope for private routes.
 */
export const getRouteAsTcx = <ThrowOnError extends boolean = false>(options: Options<GetRouteAsTcxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetRouteAsTcxError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/routes/{id}/export_tcx',
        ...options
    });
};

/**
 * Upload Activity
 * Uploads a new data file to create an activity from. Requires activity:write scope.
 */
export const createUpload = <ThrowOnError extends boolean = false>(options?: Options<CreateUploadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateUploadResponse, CreateUploadError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/uploads',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Get Upload
 * Returns an upload for a given identifier. Requires activity:write scope.
 */
export const getUploadById = <ThrowOnError extends boolean = false>(options: Options<GetUploadByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUploadByIdResponse, GetUploadByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/uploads/{uploadId}',
        ...options
    });
};

/**
 * Get Activity Streams
 * Returns the given activity's streams. Requires activity:read scope. Requires activity:read_all scope for Only Me activities.
 */
export const getActivityStreams = <ThrowOnError extends boolean = false>(options: Options<GetActivityStreamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetActivityStreamsResponse, GetActivityStreamsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/activities/{id}/streams',
        ...options
    });
};

/**
 * Get Segment Effort Streams
 * Returns a set of streams for a segment effort completed by the authenticated athlete. Requires read_all scope.
 */
export const getSegmentEffortStreams = <ThrowOnError extends boolean = false>(options: Options<GetSegmentEffortStreamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSegmentEffortStreamsResponse, GetSegmentEffortStreamsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/segment_efforts/{id}/streams',
        ...options
    });
};

/**
 * Get Segment Streams
 * Returns the given segment's streams. Requires read_all scope for private segments.
 */
export const getSegmentStreams = <ThrowOnError extends boolean = false>(options: Options<GetSegmentStreamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSegmentStreamsResponse, GetSegmentStreamsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/segments/{id}/streams',
        ...options
    });
};

/**
 * Get Route Streams
 * Returns the given route's streams. Requires read_all scope for private routes.
 */
export const getRouteStreams = <ThrowOnError extends boolean = false>(options: Options<GetRouteStreamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRouteStreamsResponse, GetRouteStreamsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/routes/{id}/streams',
        ...options
    });
};